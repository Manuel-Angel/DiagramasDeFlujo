
options{
    STATIC = false;
}


PARSER_BEGIN(Compilador)
package modelos.compilador;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Set;
import java.util.TreeMap;

public class Compilador{
	public ArrayList<String> mensajes= new ArrayList();
	public static void main (String args [] ) throws FileNotFoundException{
		String archivo="ejemplo.txt"; // cuando se requiera otro archivo, hay que pedir el nombre y se guarda aqui
		Reader r=new InputStreamReader(new FileInputStream(archivo));
		Compilador compilador = new Compilador(r); //en vez de System.in le pasamos un archivo
		try{
			//compilador.analisisLexico();
			compilador.declaracionesGlobales();
		}catch(ParseException ex){
			System.out.println(ex.getMessage());
		}
		ArrayList<Token> tokens= compilador.token_source.tablaTok;
		TreeMap<Token,Token> v=compilador.token_source.variables;
		System.out.println("\nTokens encontrados: ");
		for (Token token : tokens) {
			System.out.printf("Tipo de token: %-12s token: %s\n", CompiladorConstants.tokenImage[token.kind],token);
		}
		System.out.println("Variables: ");
		Set variables=v.keySet();
		for (Object variable : variables) {
			System.out.printf("Nombre: %-12s tipo: %s\n",variable,CompiladorConstants.tokenImage[v.get(variable).kind]);
		}
		System.out.println("Mensajes: ");
		for (int i = 0; i < compilador.mensajes.size(); i++)
			System.out.println(compilador.mensajes.get(i));

	}
}
PARSER_END(Compilador)

TOKEN_MGR_DECLS : {
    public ArrayList<Token> tablaTok = new ArrayList();
	public TreeMap<Token,Token> variables= new TreeMap();
}

SKIP : {
    " "
    |"\r" 
    |"\t" 
    |"\n" 
}
 
TOKEN:
{       //TIPO DE DATOS

		<entero: "entero">{
			//System.out.println("Token: Tipo de Dato " + image);
			tablaTok.add(matchedToken);
		}
		|<flotante: "flotante">{
			//System.out.println("Token: Tipo de Dato " + image);
			tablaTok.add(matchedToken);
		}
		|<doble: "doble">{
			//System.out.println("Token: Tipo de Dato " + image);
			tablaTok.add(matchedToken);
		}
		|<caracter: "caracter">{
			//System.out.println("Token: Tipo de Dato " + image);
			tablaTok.add(matchedToken);
		}
		|<largo: "largo">{
			//System.out.println("Token: Tipo de Dato " + image);
			tablaTok.add(matchedToken);
		}
		//operadores
		
		|<OP_SUMA: "+">{
			//System.out.println("Token: Operador de suma " + image);
			tablaTok.add(matchedToken);
		}
		|<OP_RESTA:"-">{
			//System.out.println("Token: Operador de resta " + image);
			tablaTok.add(matchedToken);
		}
		|<NUMERO:   (["0"-"9"])+ >{
			//System.out.println("Token: numero entero  " + image);
			tablaTok.add(matchedToken);
		}
		|<NUM_DEC: <NUMERO>"."(<NUMERO>)? >{
			//System.out.println("Token: NumeroDecimal  " + image);
			tablaTok.add(matchedToken);
		}
		|<MODULO: "%" >{
			//System.out.println("Token: NumeroDecimal  " + image);
			tablaTok.add(matchedToken);
		}
		|<IGUAL:"=">{
			//System.out.println("Token: IGUAL " + image);
			tablaTok.add(matchedToken);
		}
		|<POR:"*">{
			//System.out.println("Token: POR " + image);
			tablaTok.add(matchedToken);
		}
		|<ENTRE:"/">{
			//System.out.println("Token: ENTRE " + image);
			tablaTok.add(matchedToken);
		}
		|<FIN:";">{
			//System.out.println("Token: FIN " + image);
			tablaTok.add(matchedToken);
		}
		
		|<MENOR:"<">{
			//System.out.println("Token: FIN " + image);
			tablaTok.add(matchedToken);
		}
		|<MAYOR:">">{
			//System.out.println("Token: FIN " + image);
			tablaTok.add(matchedToken);
		}
		|<ABRE:"(">{
			//System.out.println("Token: FIN " + image);
			tablaTok.add(matchedToken);
		}
		|<CIERRA:")">{
			//System.out.println("Token: FIN " + image);
			tablaTok.add(matchedToken);
		}
		|<COMA: ",">{
			//System.out.println("Token: FIN " + image);
			tablaTok.add(matchedToken);
		}
		|<COMILLA: "\"">{
			tablaTok.add(matchedToken);
		}
		|<CORCH_ABRE: "[">{
			tablaTok.add(matchedToken);
		}
		|<CORCH_CIER: "]">{
			tablaTok.add(matchedToken);
		}
		|<LETRA:(["a"-"z"]|["A"-"Z"])>{
			//System.out.println("Token: LETRA" + image);
			tablaTok.add(matchedToken);
		}
		|<CARACTER_LITERAL: 
		"'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
		>{
			tablaTok.add(matchedToken);
		}
		|<VARIABLE:<LETRA>(<LETRA> | <NUMERO> | "_")*   >{
			//System.out.println("Token: VARIABLE " + image);
			tablaTok.add(matchedToken);
		}
}


void analisisLexico():
{
	
	System.out.println("inicio");
	//ArrayList<String> comp = new ArrayList();
}
{   //TIPO DE DATOS
    ( <entero> {   }
	|<flotante> {  }
	|<doble> {  }
	|<caracter> {  }
	|<largo> {  }	
	
	//operadores aritmeticos
	|<OP_RESTA> {   } 
	| <OP_SUMA> {   } 
	| <NUMERO> {   } 
	| <NUM_DEC> {   } 
	| <MODULO>
	| <POR> {   } 
	| <ENTRE> {   } 
	
	//operadores de comparacion
	| <MENOR>
	| <MAYOR>
	| <IGUAL> {   } 
	
	| <LETRA> {   } 
	| <CARACTER_LITERAL>
	| <VARIABLE> //{ compilacion.add(token.image.toString());  } 
	| <FIN>{ } 
	| <ABRE>
	| <CIERRA>
	)* 
	<EOF> //siempre va a terminar al final del archivo, si no, no termina
	//| <FIN> {compilacion.add(token.image.toString()); 
		//return compilacion;
	//} )
}

Token tipoDeDato():
{
	Token t;
}
{
	t=<entero> {return t;}
	|t=<flotante> {return t;}
	|t=<doble> {return t;}
	|t=<caracter> {return t;}
	|t=<largo> {return t;}
}
void constantes():
{ }
{
	<NUMERO>
	|<NUM_DEC>
	|<CARACTER_LITERAL>
}
void declaracionesGlobales():
{
	Token t,tipo;
	//System.out.println("mensajes: "+mensajes.size() + " tabla: " + token_source.tablaTok.size() + " variables: "+token_source.variables.size());
	mensajes.clear();
	token_source.tablaTok.clear();
	token_source.variables.clear();
	int dimenciones=0;
	//System.out.println("mensajes: "+mensajes.size() + " tabla: " + token_source.tablaTok.size() + " variables: "+token_source.variables.size());
}
{
	try{
	( 
			tipo=tipoDeDato()
			((t=<VARIABLE>|t=<LETRA>)
				(<CORCH_ABRE><NUMERO><CORCH_CIER>{dimenciones++; })?(<IGUAL>constantes())?
			){ 
				if(token_source.variables.get(t)==null){
						t.dimenciones=dimenciones;
						dimenciones=0;
						token_source.variables.put(t,tipo); 
				}else mensajes.add("La variable " + t.image +" (linea:"+t.beginLine+" columna:" +t.beginColumn+")" +"ya ha sido declarada antes.");
			}
			((<COMA>(<VARIABLE>|t=<LETRA>)
				(<CORCH_ABRE><NUMERO><CORCH_CIER>{dimenciones++; })?(<IGUAL>constantes())?
			){
					if(token_source.variables.get(t)==null){
						t.dimenciones=dimenciones;
						dimenciones=0;
						token_source.variables.put(t,tipo); 
					}else mensajes.add("La variable " + t.image +" (linea:"+t.beginLine+" columna:" +t.beginColumn+")" +"ya ha sido declarada antes.");
				}
			)*
			<FIN>
	
	)* 
	}catch(ParseException ex){
		System.out.println("que pedo " + ex);
		mensajes.add("Error sintactico: " +ex);
	}catch (TokenMgrError te){
		//do{
			//System.out.println("error lexico, caracter incorrecto: "+t.image+" en "+t.beginLine+" columna:"+t.beginColumn);
		//} while (t.kind!=EOL && t.kind !=EOF  );
	   //throw new ParseException("error lexico, caracter incorrecto: "+t.image+" en "+t.beginLine+" columna:"+t.beginColumn+" ocurrio en element");
	   mensajes.add("Error lexico: "+ te.getMessage());
	}
	{
		int ult=token_source.tablaTok.size()-1,i;
		for(i=ult;i>=0 && !token_source.tablaTok.get(i).image.equals(";");i--);

		if(i!=ult){
			Token er=token_source.tablaTok.get(i+1);
			mensajes.add("*Error sintactico en token: "+ er +" en linea "+er.beginLine +" columna: "+er.beginColumn);
		}
	}
}
void lectura():
{
	token_source.tablaTok.clear();
	//token_source.tablaTok=new ArrayList();
	mensajes=new ArrayList();
	Token t,tipo,aux;
}
{
	(t=<VARIABLE>|t=<LETRA>){ 
		aux=token_source.variables.get(t);
		if(aux==null){
			mensajes.add("La variable " + t.image +" (linea:"+t.beginLine+" columna:" +t.beginColumn+")" +" aun no ha sido declarada.");
		}
	}
	(<COMA>(t=<VARIABLE>|t=<LETRA>){ 
			aux=token_source.variables.get(t);
			if(aux==null){
				mensajes.add("La variable " + t.image +" (linea:"+t.beginLine+" columna:" +t.beginColumn+")" +" aun no ha sido declarada.");
			}
		}
	)*
}