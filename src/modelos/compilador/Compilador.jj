
options{
    STATIC = false;
	//FORCE_LA_CHECK=true; //luego usar esto para ponerle los lookahead solo donde los necesita y hacerlo mas optimo
	LOOKAHEAD=3;
}


PARSER_BEGIN(Compilador)
package modelos.compilador;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Set;
import java.util.TreeMap;

public class Compilador{
	public ArrayList<String> mensajes= new ArrayList();
	public static void main (String args [] ) throws FileNotFoundException{
		String archivo="ejemplo.txt"; // cuando se requiera otro archivo, hay que pedir el nombre y se guarda aqui
		Reader r=new InputStreamReader(new FileInputStream(archivo));
		Compilador compilador = new Compilador(r); //en vez de System.in le pasamos un archivo
		try{
			//compilador.analisisLexico();
			//compilador.declaracionesGlobales();
			compilador.VariableDeclarator();
		}catch(ParseException ex){
			System.out.println(ex.getMessage());
		}
		ArrayList<Token> tokens= compilador.token_source.tablaTok;
		TreeMap<Token,Token> v=compilador.token_source.variables;
		System.out.println("\nTokens encontrados: ");
		for (Token token : tokens) {
			System.out.printf("Tipo de token: %-12s token: %s\n", CompiladorConstants.tokenImage[token.kind],token);
		}
		System.out.println("Variables: ");
		Set variables=v.keySet();
		for (Object variable : variables) {
			System.out.printf("Nombre: %-12s tipo: %s\n",variable,CompiladorConstants.tokenImage[v.get(variable).kind]);
		}
		System.out.println("Mensajes: ");
		for (int i = 0; i < compilador.mensajes.size(); i++)
			System.out.println(compilador.mensajes.get(i));

	}
}
PARSER_END(Compilador)

TOKEN_MGR_DECLS : {
    public ArrayList<Token> tablaTok = new ArrayList();
	public TreeMap<Token,Token> variables= new TreeMap();
}

SKIP : {
    " "
    |"\r" 
    |"\t" 
    |"\n" 
}
 
TOKEN:
{       //TIPO DE DATOS

		<entero: "entero">{
			//System.out.println("Token: Tipo de Dato " + image);
			tablaTok.add(matchedToken);
		}
		|<flotante: "flotante">{
			//System.out.println("Token: Tipo de Dato " + image);
			tablaTok.add(matchedToken);
		}
		|<doble: "doble">{
			//System.out.println("Token: Tipo de Dato " + image);
			tablaTok.add(matchedToken);
		}
		|<caracter: "caracter">{
			//System.out.println("Token: Tipo de Dato " + image);
			tablaTok.add(matchedToken);
		}
		|<largo: "largo">{
			//System.out.println("Token: Tipo de Dato " + image);
			tablaTok.add(matchedToken);
		}
		//operadores
		
		|<OP_SUMA: "+">{
			//System.out.println("Token: Operador de suma " + image);
			tablaTok.add(matchedToken);
		}
		|<OP_RESTA:"-">{
			//System.out.println("Token: Operador de resta " + image);
			tablaTok.add(matchedToken);
		}
		|<NUMERO:   (["0"-"9"])+ >{
			//System.out.println("Token: numero entero  " + image);
			tablaTok.add(matchedToken);
		}
		|<NUM_DEC: <NUMERO>"."(<NUMERO>)? >{
			//System.out.println("Token: NumeroDecimal  " + image);
			tablaTok.add(matchedToken);
		}
		|<MODULO: "%" >{
			//System.out.println("Token: NumeroDecimal  " + image);
			tablaTok.add(matchedToken);
		}
		|<IGUAL:"=">{
			//System.out.println("Token: IGUAL " + image);
			tablaTok.add(matchedToken);
		}
		|<POR:"*">{
			//System.out.println("Token: POR " + image);
			tablaTok.add(matchedToken);
		}
		|<ENTRE:"/">{
			//System.out.println("Token: ENTRE " + image);
			tablaTok.add(matchedToken);
		}
		|<FIN:";">{
			//System.out.println("Token: FIN " + image);
			tablaTok.add(matchedToken);
		}
		
		|<MENOR:"<">{
			//System.out.println("Token: FIN " + image);
			tablaTok.add(matchedToken);
		}
		|<MAYOR:">">{
			//System.out.println("Token: FIN " + image);
			tablaTok.add(matchedToken);
		}
		|<ABRE:"(">{
			//System.out.println("Token: FIN " + image);
			tablaTok.add(matchedToken);
		}
		|<CIERRA:")">{
			//System.out.println("Token: FIN " + image);
			tablaTok.add(matchedToken);
		}
		|<COMA: ",">{
			//System.out.println("Token: FIN " + image);
			tablaTok.add(matchedToken);
		}
		|<COMILLA: "\"">{
			tablaTok.add(matchedToken);
		}
		|<CORCH_ABRE: "[">{
			tablaTok.add(matchedToken);
		}
		|<CORCH_CIER: "]">{
			tablaTok.add(matchedToken);
		}
		|<LLAVE_ABRE: "{">{
			tablaTok.add(matchedToken);
		}
		|<LLAVE_CIERRE: "}">{
			tablaTok.add(matchedToken);
		}
		|<LETRA:(["a"-"z"]|["A"-"Z"])>{
			//System.out.println("Token: LETRA" + image);
			tablaTok.add(matchedToken);
		}
		|<Y: "&">{
			tablaTok.add(matchedToken);
		}
		|<O: "|">{
			tablaTok.add(matchedToken);
		}
		|<NO: "!">{
			tablaTok.add(matchedToken);
		}
		| < XOR: "^" >{
			tablaTok.add(matchedToken);
		}
		| < TILDE: "~" >{
			tablaTok.add(matchedToken);
		}
		|<CARACTER_LITERAL: 
		"'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
		>{
			tablaTok.add(matchedToken);
		}
		|<VARIABLE:<LETRA>(<LETRA> | <NUMERO> | "_")*   >{
			//System.out.println("Token: VARIABLE " + image);
			tablaTok.add(matchedToken);
		}
		|< STRING_LITERAL:
		  "\""
		  (   (~["\"","\\","\n","\r"])
			| ("\\"
				( ["n","t","b","r","f","\\","'","\""]
				| ["0"-"7"] ( ["0"-"7"] )?
				| ["0"-"3"] ["0"-"7"] ["0"-"7"]
				)
			  )
		  )*
		  "\""
		>{
			tablaTok.add(matchedToken);
		}
}


void analisisLexico():
{
	
	System.out.println("inicio");
	//ArrayList<String> comp = new ArrayList();
}
{   //TIPO DE DATOS
    ( <entero> {   }
	|<flotante> {  }
	|<doble> {  }
	|<caracter> {  }
	|<largo> {  }	
	
	//operadores aritmeticos
	|<OP_RESTA> {   } 
	| <OP_SUMA> {   } 
	| <NUMERO> {   } 
	| <NUM_DEC> {   } 
	| <MODULO>
	| <POR> {   } 
	| <ENTRE> {   } 
	
	//operadores de comparacion
	| <MENOR>
	| <MAYOR>
	| <IGUAL> {   } 
	
	| <LETRA> {   } 
	| <CARACTER_LITERAL>
	| <VARIABLE> //{ compilacion.add(token.image.toString());  } 
	| <FIN>{ } 
	| <ABRE>
	| <CIERRA>
	)* 
	<EOF> //siempre va a terminar al final del archivo, si no, no termina
	//| <FIN> {compilacion.add(token.image.toString()); 
		//return compilacion;
	//} )
}

Token tipoDeDato():
{
	Token t;
}
{
	t=<entero> {return t;}
	|t=<flotante> {return t;}
	|t=<doble> {return t;}
	|t=<caracter> {return t;}
	|t=<largo> {return t;}
}
void constantes():
{ }
{
	<NUMERO>
	|<NUM_DEC>
	|<CARACTER_LITERAL>
	|<STRING_LITERAL>
}
Token identificador():
{
	Token t;
}
{
	(t=<LETRA> |t=<VARIABLE>) { return t; }
}
void declaracionesGlobales():
{
	Token t,tipo;
	//System.out.println("mensajes: "+mensajes.size() + " tabla: " + token_source.tablaTok.size() + " variables: "+token_source.variables.size());
	mensajes.clear();
	token_source.tablaTok.clear();
	token_source.variables.clear();
	int dimenciones=0;
	//System.out.println("mensajes: "+mensajes.size() + " tabla: " + token_source.tablaTok.size() + " variables: "+token_source.variables.size());
}
{
	try{
	( 
			tipo=tipoDeDato()
			((t=<VARIABLE>|t=<LETRA>)
				(<CORCH_ABRE><NUMERO><CORCH_CIER>{dimenciones++; })*[<IGUAL>constantes()]
			){ 
				if(token_source.variables.get(t)==null){
						t.dimenciones=dimenciones;
						dimenciones=0;
						token_source.variables.put(t,tipo); 
				}else mensajes.add("La variable " + t.image +" (linea:"+t.beginLine+" columna:" +t.beginColumn+")" +"ya ha sido declarada antes.");
			}
			((<COMA>(t=<VARIABLE>|t=<LETRA>)
				(<CORCH_ABRE><NUMERO><CORCH_CIER>{dimenciones++; })*[<IGUAL>constantes()]
			){
					if(token_source.variables.get(t)==null){
						t.dimenciones=dimenciones;
						dimenciones=0;
						token_source.variables.put(t,tipo); 
					}else mensajes.add("La variable " + t.image +" (linea:"+t.beginLine+" columna:" +t.beginColumn+")" +"ya ha sido declarada antes.");
				}
			)*
			<FIN>
	
	)* 
	}catch(ParseException ex){
		//System.out.println("que pedo " + ex);
		mensajes.add("Error sintactico: " +ex);
	}catch (TokenMgrError te){
		//do{
			//System.out.println("error lexico, caracter incorrecto: "+t.image+" en "+t.beginLine+" columna:"+t.beginColumn);
		//} while (t.kind!=EOL && t.kind !=EOF  );
	   //throw new ParseException("error lexico, caracter incorrecto: "+t.image+" en "+t.beginLine+" columna:"+t.beginColumn+" ocurrio en element");
	   mensajes.add("Error lexico: "+ te.getMessage());
	}
	{
		int ult=token_source.tablaTok.size()-1,i;
		for(i=ult;i>=0 && !token_source.tablaTok.get(i).image.equals(";");i--);

		if(i!=ult){
			Token er=token_source.tablaTok.get(i+1);
			mensajes.add("*Error sintactico en token: "+ er +" en linea: "+er.beginLine +" columna: "+er.beginColumn);
		}
	}
}
void lectura():
{
	token_source.tablaTok.clear();
	//token_source.tablaTok=new ArrayList();
	mensajes=new ArrayList();
	Token t,tipo,aux;
	int dim=0;
}
{
	(t=identificador()
	(<CORCH_ABRE>Expression()<CORCH_CIER>{dim++; })*
	){ 
		aux=token_source.variables.get(t);
		t.dimenciones=dim; //esto hace que en realidad se altere el token que se guardo en el arrayList ? 
		dim=0;
		if(aux==null){
			mensajes.add("La variable " + t.image +" (linea:"+t.beginLine+" columna:" +t.beginColumn+")" +" aun no ha sido declarada.");
		}
	}
	((<COMA>(t=identificador())
		(<CORCH_ABRE>Expression()<CORCH_CIER>{dim++; })*
	)	{ 
			aux=token_source.variables.get(t);
			t.dimenciones=dim; //esto hace que en realidad se altere el token que se guardo en el arrayList ? 
			dim=0;
			if(aux==null){
				mensajes.add("La variable " + t.image +" (linea:"+t.beginLine+" columna:" +t.beginColumn+")" +" aun no ha sido declarada.");
			}
		}
	)*
	{
		t=token_source.tablaTok.get(token_source.tablaTok.size()-1);
		int tip=t.kind;
		if(tip!=CompiladorConstants.CORCH_CIER && tip!=CompiladorConstants.VARIABLE && tip!=CompiladorConstants.LETRA)
			mensajes.add("Error sintactico en token " + t.image +" en linea: " + t.beginLine + " columna: " + t.beginColumn);
	}
}
void imprimir():
{
	token_source.tablaTok.clear();
	//token_source.tablaTok=new ArrayList();
	mensajes=new ArrayList();
}
{ 
	//(<STRING_LITERAL> | PostfixExpression() | <ABRE>Expression()<CIERRA> )//esto esta muy perro de generar el codigo :c 
	//(<OP_SUMA>(<STRING_LITERAL> | PostfixExpression() | <ABRE>Expression()<CIERRA> ))*  //hay que hacer "aritmetica de tipos de datos", tal vez para la otra version
	(<STRING_LITERAL> | PostfixExpression() )
	(<OP_SUMA>(<STRING_LITERAL> | PostfixExpression() ))*
}
void codigo():
{
	token_source.tablaTok.clear();
	mensajes=new ArrayList();
}
{
	((VariableDeclarator() | (Expression() <FIN>))*)
	{
	int ult=token_source.tablaTok.size()-1,i;
		for(i=ult;i>=0 && !token_source.tablaTok.get(i).image.equals(";");i--);

		if(i!=ult){
			Token er=token_source.tablaTok.get(i+1);
			mensajes.add("*Error sintactico en token: "+ er +" en linea: "+er.beginLine +" columna: "+er.beginColumn);
		}
	}
}
void VariableDeclarator() :
{
	Token tipo;
}
{
	tipo=tipoDeDato() VariableDeclaratorId(tipo) <FIN> //ANTES TENIA * PERO NO HACE FALTA, el + haria que fuera una gramatica ambigua
}
void VariableDeclaratorId(Token tipo) :
{
	int dimenciones=0;
	Token t;
}
{
  t=identificador() (<CORCH_ABRE><NUMERO><CORCH_CIER>{dimenciones++; })*
  {
	if(token_source.variables.get(t)==null){ //aqui deberia cambiarse por un treeMap de declaraciones locales pero como no hay declaracion de funciones entonces yolo
		t.dimenciones=dimenciones;
		dimenciones=0;
		token_source.variables.put(t,tipo); 
	}else mensajes.add("La variable " + t.image +" (linea:"+t.beginLine+" columna:" +t.beginColumn+")" +"ya ha sido declarada antes.");
  }
  [ <IGUAL> VariableInitializer() ]
  (<COMA>VariableDeclaratorId(tipo))*
}

void VariableInitializer() :
{}
{
	ArrayInitializer()
	|
	Expression()
}
void ArrayInitializer() :
{}
{
	<LLAVE_ABRE> [ VariableInitializer() ( LOOKAHEAD(2) <COMA> VariableInitializer() )* ] [ <COMA> ] <LLAVE_CIERRE>
}

void Expression():
{
	Token t, aux;
}
{
	ConditionalOrExpression() [AssignmentOperator() Expression()]
}

void AssignmentOperator() :
{}
{
  <IGUAL> | <POR><IGUAL> | <ENTRE><IGUAL> | <MODULO><IGUAL> | <OP_SUMA><IGUAL> | <OP_RESTA><IGUAL> | <MENOR><MENOR><IGUAL> | <MAYOR><MAYOR><IGUAL>| <MAYOR><MAYOR><IGUAL> | <Y><IGUAL> | <XOR><IGUAL> | <O><IGUAL>
}

void ConditionalOrExpression() :
{}
{
  ConditionalAndExpression() ( <O>/*<O>*/ConditionalAndExpression() )*
}
void ConditionalAndExpression() :
{}
{
  InclusiveOrExpression() ( <Y>/*<Y>*/( InclusiveOrExpression() ))*
}

void InclusiveOrExpression() :
{}
{
  ExclusiveOrExpression() //( <XOR> ExclusiveOrExpression() )*
}
void ExclusiveOrExpression() :
{}
{
  AndExpression() ( <XOR>AndExpression() )*
}
void AndExpression() :
{}
{
	//EqualityExpression() ( <Y>"&" EqualityExpression() )*
	  EqualityExpression()
}
void EqualityExpression() :
{}
{
	RelationalExpression() ( ( <IGUAL><IGUAL> | <NO><IGUAL> ) RelationalExpression() )*
}
void RelationalExpression() :
{}
{
  ShiftExpression() ( ( <MENOR> | <MAYOR> | <MENOR><IGUAL> | <MAYOR><IGUAL> ) ShiftExpression() )*
}

void ShiftExpression() :
{}
{
  AdditiveExpression() ( ( <MENOR><MENOR> | <MAYOR><MAYOR> | <MAYOR><MAYOR><MAYOR> ) AdditiveExpression() )*
}
void AdditiveExpression() :
{}
{
  MultiplicativeExpression() ( ( <OP_SUMA>| <OP_RESTA> ) MultiplicativeExpression() )*
}
void MultiplicativeExpression() :
{}
{
  UnaryExpression() ( ( <POR>| <ENTRE> | <MODULO> ) UnaryExpression() )*
}
void UnaryExpression() :
{}
{
	  ( <OP_SUMA> | <OP_RESTA> ) UnaryExpression()
//|
//  PreIncrementExpression()
//|
  //PreDecrementExpression()
  | UnaryExpressionNotPlusMinus()
}
void UnaryExpressionNotPlusMinus() :
{}
{
  ( <TILDE>| <NO> ) UnaryExpression()
//|
//LOOKAHEAD( CastLookahead() )
//CastExpression()
|
  PostfixExpression()
}
void PostfixExpression() :
{}
{
  PrimaryExpression() [ <OP_SUMA><OP_SUMA>| <OP_RESTA><OP_RESTA> ]
}
void PrimaryExpression() :
{
	int dim=0;
	Token t;
}
{
	(t=PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix(){dim++; })*)
	{
		if(t!=null)t.dimenciones=dim; //esto es para que en un futuro las variables no sean tratados como arreglos ni viceversa
	}
}
Token PrimaryPrefix() :
{
	Token t,aux;
}
{
	constantes(){return null;}
	|
	"(" Expression() ")" {return null;}

	|
	t=identificador(){
		aux=token_source.variables.get(t);
		if(aux==null){
			mensajes.add("La variable " + t.image +" (linea:"+t.beginLine+" columna:" +t.beginColumn+")" +" aun no ha sido declarada.");
		}
		return t;
	}
}
void PrimarySuffix() :
{}
{
	<CORCH_ABRE>Expression()<CORCH_CIER>
}